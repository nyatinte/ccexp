import { render } from 'ink-testing-library';
import { createMockFile } from '../../test-helpers.js';
import { MenuActions } from './MenuActions/index.js';

if (import.meta.vitest) {
  const { describe, test, expect, vi } = import.meta.vitest;

  describe('MenuActions', () => {
    test('„É°„Éã„É•„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÂü∫Êú¨Ë°®Á§∫', () => {
      const file = createMockFile('CLAUDE.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain('üìã Action Menu - /test/CLAUDE.md');
      expect(lastFrame()).toContain('[C] Copy Content');
      expect(lastFrame()).toContain('[P] Copy Path (Absolute)');
      expect(lastFrame()).toContain('[R] Copy Path (Relative)');
      expect(lastFrame()).toContain('[D] Copy Current Directory');
      expect(lastFrame()).toContain('[O] Open File');
    });

    test('ÂàùÊúüÈÅ∏ÊäûÁä∂ÊÖã„ÅÆË°®Á§∫', () => {
      const file = createMockFile('CLAUDE.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      // ÊúÄÂàù„ÅÆÈ†ÖÁõÆ„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Çã
      expect(lastFrame()).toContain('‚ñ∫ [C] Copy Content');
    });

    test('„Ç≠„Éº„Éú„Éº„Éâ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÅÆË°®Á§∫', () => {
      const file = createMockFile('CLAUDE.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain(
        '‚Üë‚Üì: Navigate | Enter: Execute | [Key]: Direct action | Esc: Close',
      );
    });

    test('Áï∞„Å™„Çã„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Åß„ÅÆË°®Á§∫', () => {
      const file = createMockFile(
        'test-command.md',
        'slash-command',
        '/project/.claude/commands/test-command.md',
      );
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain(
        'üìã Action Menu - /project/.claude/commands/test-command.md',
      );
    });

    test('ÂÖ®„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÂ≠òÂú®Á¢∫Ë™ç', () => {
      const file = createMockFile('CLAUDE.local.md', 'claude-local-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      // 5„Å§„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(lastFrame()).toContain('[C] Copy Content');
      expect(lastFrame()).toContain('[P] Copy Path (Absolute)');
      expect(lastFrame()).toContain('[R] Copy Path (Relative)');
      expect(lastFrame()).toContain('[D] Copy Current Directory');
      expect(lastFrame()).toContain('[O] Open File');
    });

    test('„É°„Éã„É•„Éº„ÅÆ„Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±', () => {
      const file = createMockFile('CLAUDE.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();
      expect(output).toContain('üìã Action Menu');
      expect(output).toContain('/test/CLAUDE.md');
    });

    test('„É°„Éã„É•„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÈ†ÜÂ∫è', () => {
      const file = createMockFile('test.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();

      // „Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåÊ≠£„Åó„ÅÑÈ†ÜÂ∫è„ÅßË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const copyContentIndex = output.indexOf('[C] Copy Content');
      const copyAbsoluteIndex = output.indexOf('[P] Copy Path (Absolute)');
      const copyRelativeIndex = output.indexOf('[R] Copy Path (Relative)');
      const copyDirIndex = output.indexOf('[D] Copy Current Directory');
      const openFileIndex = output.indexOf('[O] Open File');

      expect(copyContentIndex).toBeGreaterThan(-1);
      expect(copyAbsoluteIndex).toBeGreaterThan(copyContentIndex);
      expect(copyRelativeIndex).toBeGreaterThan(copyAbsoluteIndex);
      expect(copyDirIndex).toBeGreaterThan(copyRelativeIndex);
      expect(openFileIndex).toBeGreaterThan(copyDirIndex);
    });

    test('Èï∑„ÅÑ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅÆË°®Á§∫', () => {
      const file = createMockFile(
        'very-long-filename.md',
        'slash-command',
        '/very/long/path/to/project/.claude/commands/very-long-filename.md',
      );
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain(
        '/very/long/path/to/project/.claude/commands/very-long-filename.md',
      );
    });

    test('ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅÆË°®Á§∫', () => {
      const file = createMockFile(
        'file with spaces & symbols.md',
        'claude-md',
        '/path/with spaces & symbols/file with spaces & symbols.md',
      );
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain(
        '/path/with spaces & symbols/file with spaces & symbols.md',
      );
    });

    test('„Ç∞„É≠„Éº„Éê„É´Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË°®Á§∫', () => {
      const file = createMockFile(
        'CLAUDE.md',
        'global-md',
        '/Users/username/.claude/CLAUDE.md',
      );
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      expect(lastFrame()).toContain(
        'üìã Action Menu - /Users/username/.claude/CLAUDE.md',
      );
    });

    test('„É°„Éã„É•„Éº„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàÊßãÈÄ†', () => {
      const file = createMockFile('test.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();

      // „É¨„Ç§„Ç¢„Ç¶„ÉàË¶ÅÁ¥†„ÅÆÁ¢∫Ë™ç
      expect(output).toContain('üìã Action Menu');
      expect(output).toContain('‚ñ∫ [C] Copy Content'); // ÈÅ∏Êäû„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
      expect(output).toContain('‚Üë‚Üì: Navigate'); // „Éò„É´„Éó„ÉÜ„Ç≠„Çπ„Éà
    });

    test('„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆË™¨Êòé„ÉÜ„Ç≠„Çπ„ÉàÁ¢∫Ë™ç', () => {
      const file = createMockFile('test.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();

      // ÂêÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆ„É©„Éô„É´„ÇíÁ¢∫Ë™ç
      expect(output).toContain('Copy Content');
      expect(output).toContain('Copy Path (Absolute)');
      expect(output).toContain('Copy Path (Relative)');
      expect(output).toContain('Copy Current Directory');
      expect(output).toContain('Open File');
    });

    test('„Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„ÅÆË°®Á§∫', () => {
      const file = createMockFile('test.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();

      // ÂêÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíÁ¢∫Ë™ç
      expect(output).toContain('[C]');
      expect(output).toContain('[P]');
      expect(output).toContain('[R]');
      expect(output).toContain('[D]');
      expect(output).toContain('[O]');
    });

    test('„É°„Éã„É•„Éº„ÅÆ„Éò„É´„Éó„Çª„ÇØ„Ç∑„Éß„É≥', () => {
      const file = createMockFile('test.md', 'claude-md');
      const onClose = vi.fn();

      const { lastFrame } = render(
        <MenuActions file={file} onClose={onClose} />,
      );

      const output = lastFrame();

      // „Éò„É´„Éó„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂêÑË¶ÅÁ¥†„ÇíÁ¢∫Ë™ç
      expect(output).toContain('‚Üë‚Üì: Navigate');
      expect(output).toContain('Enter: Execute');
      expect(output).toContain('[Key]: Direct action');
      expect(output).toContain('Esc: Close');
    });

    test('Áï∞„Å™„Çã„Éï„Ç°„Ç§„É´Âêç„Åß„ÅÆË°®Á§∫Á¢∫Ë™ç', () => {
      const files = [
        createMockFile('config.md', 'claude-md'),
        createMockFile('settings.md', 'claude-local-md'),
        createMockFile('deploy.md', 'slash-command'),
      ];

      files.forEach((file) => {
        const onClose = vi.fn();
        const { lastFrame } = render(
          <MenuActions file={file} onClose={onClose} />,
        );

        expect(lastFrame()).toContain(`üìã Action Menu - ${file.path}`);
      });
    });

    test('„É°„Éã„É•„Éº„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÅÆÂÆâÂÆöÊÄß', () => {
      const file1 = createMockFile('file1.md', 'claude-md');
      const file2 = createMockFile('file2.md', 'claude-local-md');
      const onClose = vi.fn();

      const { lastFrame, rerender } = render(
        <MenuActions file={file1} onClose={onClose} />,
      );

      expect(lastFrame()).toContain('file1.md');

      // Âà•„ÅÆ„Éï„Ç°„Ç§„É´„ÅßÂÜç„É¨„É≥„ÉÄ„É™„É≥„Ç∞
      rerender(<MenuActions file={file2} onClose={onClose} />);

      expect(lastFrame()).toContain('file2.md');
      expect(lastFrame()).toContain('[C] Copy Content');
    });
  });
}
